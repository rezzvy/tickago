class TickAgo{static defaultLabels={past:"{value} {unit}{plural} ago",future:"in {value} {unit}{plural}",now:"just now",units:{year:"year",month:"month",day:"day",hour:"hour",minute:"minute",second:"second"},plural:e=>e>1?"s":""};static #a(e,t){let a=t.getFullYear()-e.getFullYear(),s=t.getMonth()-e.getMonth(),l=t.getDate()-e.getDate(),i=t.getHours()-e.getHours(),u=t.getMinutes()-e.getMinutes(),n=t.getSeconds()-e.getSeconds();if(n<0&&(u--,n+=60),u<0&&(i--,u+=60),i<0&&(l--,i+=24),(s<0||0===s&&l<0)&&(a--,s+=12),l<0){s--;let r=new Date(e.getFullYear(),e.getMonth()+1,0).getDate();l=r-e.getDate()+t.getDate()}return s<0&&(a--,s+=12),{years:a,months:s,days:l,hours:i,minutes:u,seconds:n}}static compare(e,t){let a=new Date(e),s=new Date(t);if(isNaN(a.getTime()))throw Error("Invalid parameter: date1 is not a valid date");if(isNaN(s.getTime()))throw Error("Invalid parameter: date2 is not a valid date");let l=s>a,i=l?a:s,u=l?s:a,n=this.#a(i,u),r=u.getTime()-i.getTime();return{...n,raw:{milliseconds:r,seconds:r/1e3,minutes:r/6e4,hours:r/36e5,days:r/864e5,months:r/26298e5},isFuture:l}}static moment(e,t={}){let a=new Date(e);if(isNaN(a.getTime()))throw Error("Invalid parameter: timestamp is not a valid date");if("object"!=typeof t||null===t)throw Error("Invalid parameter: labels must be an object");let s=this.compare(new Date,a),l=0,i="";if(s.years>0)l=s.years,i="year";else if(s.months>0)l=s.months,i="month";else if(s.days>0)l=s.days,i="day";else if(s.hours>0)l=s.hours,i="hour";else if(s.minutes>0)l=s.minutes,i="minute";else{if(!(s.seconds>1))return t.now||TickAgo.defaultLabels.now;l=s.seconds,i="second"}let u={...TickAgo.defaultLabels,...t,units:{...TickAgo.defaultLabels.units,...t.units||{}}};if("function"!=typeof u.plural)throw Error("Invalid parameter: labels.plural must be a function");if("string"!=typeof u.past||"string"!=typeof u.future)throw Error("Invalid parameter: labels.past and labels.future must be strings");let n=u.plural(l,i),r=u.units[i]||i,o=s.isFuture?u.future:u.past,d=o.includes("{value}")&&o.includes("{unit}")&&o.includes("{plural}"),$=d?o:s.isFuture?TickAgo.defaultLabels.future:TickAgo.defaultLabels.past;return $.replace("{value}",l).replace("{unit}",r).replace("{plural}",n)}}"undefined"!=typeof module&&module.exports?module.exports=TickAgo:window.TickAgo=TickAgo;